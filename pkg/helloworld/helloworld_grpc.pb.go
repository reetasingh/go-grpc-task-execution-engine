// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskExecutionClient is the client API for TaskExecution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskExecutionClient interface {
	// Sends a greeting
	ExecuteTask(ctx context.Context, in *TaskExecutionRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type taskExecutionClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskExecutionClient(cc grpc.ClientConnInterface) TaskExecutionClient {
	return &taskExecutionClient{cc}
}

func (c *taskExecutionClient) ExecuteTask(ctx context.Context, in *TaskExecutionRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/helloworld.TaskExecution/ExecuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExecutionClient) GetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/helloworld.TaskExecution/GetTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskExecutionServer is the server API for TaskExecution service.
// All implementations must embed UnimplementedTaskExecutionServer
// for forward compatibility
type TaskExecutionServer interface {
	// Sends a greeting
	ExecuteTask(context.Context, *TaskExecutionRequest) (*TaskResponse, error)
	GetTaskStatus(context.Context, *TaskStatusRequest) (*TaskResponse, error)
	mustEmbedUnimplementedTaskExecutionServer()
}

// UnimplementedTaskExecutionServer must be embedded to have forward compatible implementations.
type UnimplementedTaskExecutionServer struct {
}

func (UnimplementedTaskExecutionServer) ExecuteTask(context.Context, *TaskExecutionRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedTaskExecutionServer) GetTaskStatus(context.Context, *TaskStatusRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedTaskExecutionServer) mustEmbedUnimplementedTaskExecutionServer() {}

// UnsafeTaskExecutionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskExecutionServer will
// result in compilation errors.
type UnsafeTaskExecutionServer interface {
	mustEmbedUnimplementedTaskExecutionServer()
}

func RegisterTaskExecutionServer(s grpc.ServiceRegistrar, srv TaskExecutionServer) {
	s.RegisterService(&TaskExecution_ServiceDesc, srv)
}

func _TaskExecution_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutionServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.TaskExecution/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutionServer).ExecuteTask(ctx, req.(*TaskExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExecution_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutionServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.TaskExecution/GetTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutionServer).GetTaskStatus(ctx, req.(*TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskExecution_ServiceDesc is the grpc.ServiceDesc for TaskExecution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskExecution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.TaskExecution",
	HandlerType: (*TaskExecutionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _TaskExecution_ExecuteTask_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _TaskExecution_GetTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}
